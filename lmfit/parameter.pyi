from typing import Any, Callable, Self

import numpy as np
from asteval import Interpreter

from lmfit._types import _Fmt, _Readable, _Writable

SCIPY_FUNCTIONS: dict[str, Callable]


def check_ast_errors(expr_eval: Interpreter) -> None: ...


class Writer:
    messages: list[str]

    def __init__(self, **kws) -> None: ...

    def write(self, msg: str) -> None: ...


def asteval_with_uncertainties(
        *vals,
        obj: Any | None = None,
        pars: Any | None = None,
        names: list | None = None,
        **kwargs
) -> float: ...


class Parameters(dict):
    def __init__(self, usersyms: dict | None = None) -> None: ...

    # type: ignore[bad-override]
    def update(self, other: Parameters) -> Self: ...

    def __copy__(self) -> Self: ...

    def __deepcopy__(self, memo: dict[int, Any] | None): ...

    def __add__(self, other: Parameters) -> Parameters: ...

    def __iadd__(self, other: Parameters) -> Self: ...

    def __array__(self) -> np.ndarray: ...

    def eval(self, expr: str) -> float: ...

    def update_constraints(self) -> None: ...

    def pretty_repr(self, oneline: bool = False) -> str: ...

    def pretty_print(
            self,
            oneline: bool = False,
            colwidth: int = 8,
            precision: int = 4,
            fmt: _Fmt = 'g',
            columns: list[str] = [
                'value', 'min', 'max', 'stderr', 'vary', 'expr', 'brute_step'
            ]
    ) -> None: ...

    def set(self, **kws) -> None: ...

    def add(
            self,
            name: str | Parameter,
            value: float | None = None,
            vary: bool | None = None,
            min: float = ...,
            max: float = ...,
            expr: str | None = None,
            brute_step: float | None = None,
            user_data: Any | None = None
    ) -> None: ...

    def add_many(self, *parlist: tuple | Parameter) -> None: ...

    def valuesdict(self) -> dict: ...

    def create_uvars(self, covar: np.ndarray | None = None) -> dict: ...

    def dumps(self, **kws) -> str: ...

    def loads(self, s: str, **kws) -> Self: ...

    def dump(self, fp: _Writable, **kws) -> int: ...

    def load(self, fp: _Readable, **kws) -> Self: ...


class Parameter:
    name: str
    user_data: dict
    init_value: float | None
    min: float
    max: float
    brute_step: float | None
    stderr: float
    correl: dict
    from_internal: Callable[[float], float]

    def __init__(
            self,
            name: str,
            value: float | None = None,
            vary: bool = True,
            min: float = ...,
            max: float = ...,
            expr: str | None = None,
            brute_step: float | None = None,
            user_data: dict | None = None
    ) -> None: ...

    def set(
            self,
            value: float | None = None,
            vary: bool | None = None,
            min: float | None = None,
            max: float | None = None,
            expr: str | None = None,
            brute_step: float | None = None,
            is_init_value: bool = True
    ) -> None: ...

    def setup_bounds(self) -> float: ...

    def scale_gradient(self, val: float) -> float: ...

    @property
    def value(self) -> float: ...

    @value.setter
    def value(self, val: float) -> None: ...

    @property
    def vary(self) -> bool: ...

    @vary.setter
    def vary(self, val: bool) -> None: ...

    @property
    def expr(self) -> str: ...

    @expr.setter
    def expr(self, val: str) -> None: ...

    def __array__(self) -> np.ndarray: ...

    def __abs__(self) -> float: ...

    def __neg__(self) -> float: ...

    def __pos__(self) -> float: ...

    def __bool__(self) -> bool: ...

    def __int__(self) -> int: ...

    def __float__(self) -> float: ...

    def __trunc__(self) -> int: ...

    def __add__(self, other: float) -> float: ...

    def __sub__(self, other: float) -> float: ...

    def __truediv__(self, other: float) -> float: ...

    def __floordiv__(self, other: float) -> float: ...

    def __divmod__(self, other: float) -> tuple[float, float]: ...

    def __mod__(self, other: float) -> float: ...

    def __mul__(self, other: float) -> float: ...

    def __pow__(self, other: float) -> float: ...

    def __gt__(self, other: float) -> float: ...

    def __ge__(self, other: float) -> float: ...

    def __le__(self, other: float) -> float: ...

    def __lt__(self, other: float) -> float: ...

    def __eq__(self, other: float) -> float: ...

    def __ne__(self, other: float) -> float: ...

    def __radd__(self, other: float) -> float: ...

    def __rtruediv__(self, other: float) -> float: ...

    def __rdivmod__(self, other: float) -> float: ...

    def __rfloordiv__(self, other: float) -> float: ...

    def __rmod__(self, other: float) -> float: ...

    def __rmul__(self, other: float) -> float: ...

    def __rpow__(self, other: float) -> float: ...

    def __rsub__(self, other: float) -> float: ...


def create_params(**kws): ...
